{"ast":null,"code":"import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var progress = function (snap) {\n      return subscriber.next(snap);\n    };\n\n    var error = function (e) {\n      return subscriber.error(e);\n    };\n\n    var complete = function () {\n      return subscriber.complete();\n    }; // emit the current state of the task\n\n\n    progress(task.snapshot); // emit progression of the task\n\n    var unsubscribeFromOnStateChanged = task.on('state_changed', progress); // use the promise form of task, to get the last success snapshot\n\n    task.then(function (snapshot) {\n      progress(snapshot);\n      setTimeout(function () {\n        return complete();\n      }, 0);\n    }, function (e) {\n      progress(task.snapshot);\n      setTimeout(function () {\n        return error(e);\n      }, 0);\n    }); // the unsubscribe method returns by storage isn't typed in the\n    // way rxjs expects, Function vs () => void, so wrap it\n\n    return function unsubscribe() {\n      unsubscribeFromOnStateChanged();\n    };\n  }).pipe( // since we're emitting first the current snapshot and then progression\n  // it's possible that we could double fire synchronously; namely when in\n  // a terminal state (success, error, canceled). Debounce to address.\n  debounceTime(0));\n}\n\nfunction getDownloadURL(ref) {\n  return from(getDownloadURL$1(ref));\n} // TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction getMetadata(ref) {\n  return from(getMetadata$1(ref));\n} // MARK: Breaking change (renaming put to uploadBytesResumable)\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  return new Observable(function (subscriber) {\n    var task = uploadBytesResumable$1(ref, data, metadata);\n    var subscription = fromTask(task).subscribe(subscriber);\n    return function unsubscribe() {\n      subscription.unsubscribe();\n      task.cancel();\n    };\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n} // MARK: Breaking change (renaming put to uploadString)\n\n\nfunction uploadString(ref, data, format, metadata) {\n  return from(uploadString$1(ref, data, format, metadata));\n}\n\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (snapshot) {\n    return {\n      progress: snapshot.bytesTransferred / snapshot.totalBytes * 100,\n      snapshot: snapshot\n    };\n  }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString }; //# sourceMappingURL=index.esm.js.map","map":null,"metadata":{},"sourceType":"module"}